<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>信</title>
    <link>http://xinx.online/</link>
    <description>Recent content on 信</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 06 Mar 2020 20:48:37 +0800</lastBuildDate>
    
	<atom:link href="http://xinx.online/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>《JS语法》</title>
      <link>http://xinx.online/posts/js%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 06 Mar 2020 20:48:37 +0800</pubDate>
      
      <guid>http://xinx.online/posts/js%E8%AF%AD%E6%B3%95/</guid>
      <description>表达式和语句 什么是表达式和语句  表达式一般都有值，语句可能有可能没有。  1+2 // 这是一个表达式 let a = 1+2 // 这是一个语句 let a = 1+2 ; let b = a //一个语句以分号结束，行末没有编译器会自动添加  语句一般会改变环境。（声明，赋值。） 表达式  1+2 表达式的值为3。 add（1，2）表达式的值为函数的返回值。只有函数有返回值。 console.log也是一个表达式，他的值为函数本身。 console.log(3)表达式的值为：undefined。打印出的3是console打印出的一个记录。  以上两者并不绝对。
标识符的规则 取名用到的就是标识符（区分大小写），也就是变量名。
 常用的包括希腊字母 拉丁文 中文字符 &amp;ldquo;$&amp;ldquo;符号 下划线 &amp;ldquo;_&amp;rdquo; （这些都属于Unicode字母[即用双字节对字符进行编码；统一的字符编码标准]）
 第一个字符后面的可以加数字，例如下面的：
 a1 _abc $123 中文
if else 语句  例1： if (表达式) { 语句1
} else {
语句2
}
 例2： if(表达式){</description>
    </item>
    
    <item>
      <title>《浅析URL》</title>
      <link>http://xinx.online/posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Sat, 28 Dec 2019 10:49:49 +0800</pubDate>
      
      <guid>http://xinx.online/posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>  URL 全称：（统一资源定位符） WWW=URL+HTTP+HTML(李爵士发明的三样东西)
 URL 包含哪些内容  URL分为：协议+域名/IP+端口号+路径+查询字符串+锚点   协议（protocol）：用来约束用户行为，如果不按照规定来会BUG。 域名/IP：IP分为内网和外网，域名是IP的代称，方便用户记忆者例如 baidu.com 是一个域名 它的IP地址实际是39.156.69.79 端口号：端口号从&amp;rdquo;0-65535&amp;rdquo; 前1024个已经被使用，我们使用http协议访问网站使用的是&amp;rdquo;80端口&amp;rdquo;，使用https协议则使用的是&amp;rdquo;443口&amp;rdquo;。域名/IP+端口可以帮助我们在互联网上找到所需要的服务。 路径：网站的具体某一项的路径 查询参数：查询参数可以让我们访问同一网站得到不同的结果，例百度浏览器搜索不同的关键词就可以得到不同的结果。 锚点：在该页面中定位到设定好的位置，一般用作网站目录。（锚和浏览器有关，发送给远端服务器并不会有响应）  域名的类别   顶级域名 例如“.com” “.org” “.cn” 等 二级域名 公司名+顶级域名 如 baidu.com 三级域名 例如 www.example.com实际上是一个三级域名，它是example.com的子域名。而www.example.com和example.com可能属于不同的机构，因此访问两者可能会产生区别。  IP的作用与ping命令的使用   IP全称：Internet protocal （用来定位一个设备）。 IP分为内网和外网 只要在互联网中 你就拥有一个独特的IP 用来定位你设备的位置。 内网外网不能直接相通，需要使用路由器连接。 我们可以用 ping 命令模拟浏览器对服务器发起的请求（一个域名可以对应不同IP，防止访问量过大导致服务器过载，反之一个IP也可以对应不同域名，在我们访问时，两者之间会通过DNS连接，将域名转化为IP地址）。 输入 ipconfig 命令，可查看本机的IP地址。  </description>
    </item>
    
    <item>
      <title>《JavaScript的诞生》</title>
      <link>http://xinx.online/posts/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Sat, 28 Dec 2019 10:48:37 +0800</pubDate>
      
      <guid>http://xinx.online/posts/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>javaScript的历史与诞生 javaScript(通常缩写为JS) 是由设计者 Brendan Eich 于1995年开发的语言 当时网景公司开发JS的目的是为了让浏览器可以与网页互动 Brendan Eich 觉得这种语言只要能完成一些简单操作就行 不必设计的很复杂 使得后来的JavaScript存在许多缺陷
javaScript的设计思路  借鉴C语言的基本语法 借鉴java语言的数据类型和内存管理 借鉴scheme语言，将函数提升到“第一等公民”（first class）的地位。 借鉴self语言，使用基于原型（prototype）的继承机制。 所以，javascript语言实际上是两种语言风格的混合产物 （简化的）函数式编程+（简化的）面向对象编程。   javaScript的10个设计缺陷  因为 Brendan Eich 当时只是为了向公司交差 仅花了十天就完成了开发 加上过早的建立标准化 没有时间调整 直到今天JS仍是世界上唯一使用prototype继承模型的主要语言，没有设计先例可以参考，这些原因使得javaScript存在许多缺陷
 不适合开发大型程序  javaScript没有名称空间（namespace），很难模块化；没有如何将代码分布在多个文件的规范；允许同名函数的重复定义，后面的定义可以覆盖前面的定义，不利于模块化加载。  非常小的标准库 Javascript提供的标准函数库非常小，只能完成一些基本操作，很多功能都不具备,JavaScript的很多操作依赖于浏览器提供的DOM（文档对象模型）和BOM（浏览器对象模型），难以离开浏览器这个运行环境。在NodeJs出现后有所改善。
 null和undefined null属于对象（object）的一种，意思是该对象为空；undefined则是一种数据类型，表示未定义。两者非常容易混淆，但是含义完全不同。
 全局变量难以控制 Javascript的全局变量，在所有模块中都是可见的；任何一个函数内部都可以生成全局变量，这大大加剧了程序的复杂性。 function main() { a = 1; } console.log(a); //1而不是undefined
 自动插入行尾分号
Javascript的所有语句，都必须以分号结尾。但是，如果你忘记加分号，解释器并不报错，而是为你自动加上分号。有时候，这会导致一些难以发现的错误。
 “==”和“===” JavaScript在用“==”判断两个值是否相等时，会自动转化值的类型， 这往往不是我们想要的结果。因此任何情况都使用“===”运算符比较好
 “+”运算符 JavaScript里的“+”不仅可以用来对两个数字相加，还可以表示字符串连接符。这造成了两种不同类型的值：数字和字符串也能相加：
 var a = 1 + &#39;10&#39; // &#39;110  数组和对象的区分 Javascript的数组也属于对象（object），所以要区分一个对象到底是不是数组</description>
    </item>
    
    <item>
      <title>《CSS知识总结》</title>
      <link>http://xinx.online/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 28 Dec 2019 09:50:22 +0800</pubDate>
      
      <guid>http://xinx.online/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>浏览器渲染原理（如图）   用户在与网页交互时 对网页样式进行改变的原理是JavaScript对样式的更新，Js更新样式有以下三种方式。
  选择合适的样式属性可以提高代码性能 CSS触发器
  CSS文档流 小科普: W3C规范中没有&amp;rdquo;文档流&amp;rdquo;（document flow）这个概念，只有normal-flow普通流
文档流叫法的由来是中文翻译问题。
 文档流的流动方向
inline元素 从左往右 到达最后边才换行 一行容不下的时候 会折断跨两行
block 元素 从上到下 每一个都独占一行
inline-block元素 也是从左到右 但一行容不下的时候 不会跨行分成两块
新的HTML5的标准里，元素是不分内联，块级的。 关于宽度
inline元素宽度由内部inline元素宽度的和决定的，不能设置宽度（width）。 block元素默认自动计算宽度（auto），可用 width 任意指定宽度。但永远不要写 width=&amp;ldquo;100%&amp;ldquo;，因为 auto 并不是 100% 。
inline-block 元素结合了两者的特点 可用 width 指定。（即使比元素自身窄也可以）
 关于高度
inline 元素的高度由line-height 间接决定，与height无关；
block 元素的高度由内部文档流的元素决定，可以设置height；（如果内部什么都没有，高度为0）
inline-block 元素与 block 元素类似，可以设置height。
 关于溢出
当内容区大于容器设定的高度或宽度时，内容会溢出。
可以用 overflow (溢出) 属性设置滚动条，拉动滚动条会显示溢出的内容。
overflow: auto; （自动显示滚动条，内容区溢出时会出现，没有溢出时会消失。）
overflow：scroll; （会一直显示滚动条，不论是否溢出。）</description>
    </item>
    
    <item>
      <title>《HTML常用标签》</title>
      <link>http://xinx.online/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sat, 28 Dec 2019 09:47:01 +0800</pubDate>
      
      <guid>http://xinx.online/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>文章目录  &amp;lt;a&amp;gt;标签 &amp;lt;img&amp;gt;标签 &amp;lt;table&amp;gt;标签 &amp;lt;form&amp;gt;标签 &amp;lt;input&amp;gt;标签  &amp;lt;a&amp;gt; 标签 1.&amp;lt;a&amp;gt; 标签的属性
 href
该属性可以跳转到外部页面、内部锚点、邮箱、电话、指定当前页面位置等。 target
该属性指定如何展示打开的链接，可以是在指定的窗口打开。  2.href 属性的取值
 URL
互联网支持多种协议，必须指明网址使用哪一种协议，默认是 HTTP 协议。也就是说，如果省略协议，直接在浏览器地址栏输入 www.baidu.com，那么浏览器默认会补全并且访问。HTTPS 是 HTTP 的加密版本，出于安全考虑，越来越多的网站使用这个协议。
 路径
若 href 的取值为路径，则&amp;lt;a&amp;gt;标签实际访问的是服务器本地的资源文件。
 伪协议
伪协议使&amp;lt;a&amp;gt;标签不仅能访问其他页面，还能发邮件，打电话甚至执行代码。
 锚点
网页内部的定位点，使用#加上锚点名称，浏览器会定位到该元素的位置。比如，用户访问网址https://xxx.com/index.html#锚点名称
浏览器会自动将页面滚动到 锚点名称 的位置。
  3.target 属性的取值
 self
当前窗口打开，这是默认值。 blank
新窗口打开。 parent
上层窗口打开，这通常用于从父窗口打开的子窗口，如果当前窗口没有上层窗口，这个值等同于 self 。 top
顶层窗口打开。如果当前窗口就是顶层窗口，这个值等同于 self 。  &amp;lt;img&amp;gt; 标签  img 标签用于插入图片。使得图片变成一个可以点击的链接。
&amp;lt;img src=&amp;quot;01.png&amp;quot;&amp;gt;   上面代码在网页插入一张图片01.</description>
    </item>
    
    <item>
      <title>《HTML入门笔记1》</title>
      <link>http://xinx.online/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Sat, 28 Dec 2019 09:46:44 +0800</pubDate>
      
      <guid>http://xinx.online/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>title: &amp;ldquo;《HTML入门笔记1》&amp;rdquo; date: 2019-10-22T15:54:24+08:00
draft: false HTML 的发明 超文本标记语言（英语：HyperText Markup Language，简称：HTML) 由 Tim Berners-Lee 于 1990 年发明，是一种用于创建网页的标准标记语言。
HTML 起手式  在编辑器里输入 !+Tab 可以自动生成一个完整的 HTML 模板  不管多么复杂的网页，都是从上面这个基本结构衍生出来的。 图中代码的缩进和换行，对于浏览器不产生作用。所以上面的代码完全可以写成一行，渲染结果不变。上面这样分行写，只是为了提高可读性
 标签是网页的顶层容器  用于放置网页的元信息  用于放置网页的主体内容
 这三个标签是一个 HTML 文档的重要组成部分，缺一不可。
  标签 1. 常用章节标签  &amp;lt;h1&amp;gt;-&amp;lt;h6&amp;gt; HTML 提供了6个标签，用来表示文章的标题。 &amp;lt;section&amp;gt; 表示一个含有主题的独立部分，通常用在文档里面表示一个章节。 &amp;lt;article&amp;gt; 表示页面里面一段完整的内容。 &amp;lt;main&amp;gt; 标签表示页面的主体内容，一个页面只能有一个。 &amp;lt;aside&amp;gt; 标签用来放置与网页或文章主要内容间接相关的部分。 &amp;lt;header&amp;gt;,&amp;lt;footer&amp;gt;,&amp;lt;p&amp;gt; 文档的头部、脚部、段落。  2. 内容标签  &amp;lt;strong&amp;gt; 行内元素，浏览器会以粗体显示内容。 &amp;lt;em&amp;gt; 行内标签，浏览器会以斜体显示它包含的内容。 &amp;lt;code&amp;gt; 行内元素，浏览器默认会以等宽字体显示。 &amp;lt;pre&amp;gt; 块级元素，浏览器会保留所有的换行和连续空格。 &amp;lt;a&amp;gt; 链接通过&amp;lt;a&amp;gt;标签表示，浏览器会跳转到指定的网址   全局属性 所有元素都可以使用的属性</description>
    </item>
    
    <item>
      <title>《Hugo搭建博客流程》</title>
      <link>http://xinx.online/posts/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sat, 28 Dec 2019 08:50:11 +0800</pubDate>
      
      <guid>http://xinx.online/posts/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/</guid>
      <description> 1. 下载hugo 点击下载
2. 配置环境变量 在Path里添加 hugo 的路径，命令行输入hugo version 显示版本号等信息就说明安装成功
3. 打开官网 在官网 根据提示执行 step 2 ~ step 7
4. 开始写博客  创建站点 hugo new site [站点名] 推荐用VSCode，按照markdown语法撰写博客 过程中用 hugo server -D 进行实时预览 运行 hugo 命令生成静态文件  5. 使用 GitHub 部署博客  在GitHub上创建新仓库 仓库名[你的GitHub用户名.github.io] 在本地的 public 目录 运行 git init 新建本地仓库 运行 git add . git commit -v git push 将本地仓库上传到 GitHub 上 在 GitHub 设置中找到 GitPage, 将 source 设置为 master Settings中找到 GitHub Pages 点击浏览   </description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://xinx.online/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Sat, 28 Dec 2019 08:45:10 +0800</pubDate>
      
      <guid>http://xinx.online/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>#大家好
我的博客开通了，希望我能写出好文章给大家看。</description>
    </item>
    
  </channel>
</rss>